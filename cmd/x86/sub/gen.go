package sub

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strings"

	"github.com/kalamay/x86/cmd/x86/gen"
	"github.com/kalamay/x86/instruction"
)

type GenCmd struct {
	Pretty   bool   `short:"P" help:"Format the output."`
	Package  string `short:"p" help:"Package name."`
	Var      string `short:"v" help:"Variable name." default:"Instructions"`
	Receiver string `short:"r" help:"Receiver type." default:"*Emit"`
	IDType   string `short:"i" help:"Instruction ID const type." default:"InstructionID"`
}

func (cli *GenCmd) Run(data *instruction.Set) error {
	src := bytes.Buffer{}
	ctx := gen.Context{
		Package:  cli.Package,
		Var:      cli.Var,
		Receiver: cli.Receiver,
		IDType:   cli.IDType,
	}
	if ctx.Package == "" {
		ctx.Package = strings.ReplaceAll(data.Name, "-", "_")
	}

	fmt.Fprintf(&src, "// Code generated by %q; DO NOT EDIT.\n\n", strings.Join(os.Args, " "))

	if err := ctx.Source(&src, data); err != nil {
		return err
	}

	if cli.Pretty {
		b, err := format.Source(src.Bytes())
		if err != nil {
			return err
		}
		fmt.Printf("%s", b)
	} else {
		fmt.Printf("%s\n", src.Bytes())
	}

	return nil
}
